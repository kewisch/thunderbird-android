name: Shippable Build & Signing
on:
  workflow_dispatch:

jobs:
  get_environment:
    runs-on: ubuntu-latest
    outputs:
      releaseEnv: ${{ steps.getReleaseEnv.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: getReleaseEnv
        with:
          result-encoding: string
          script: |
            const RELEASE_ENVS = {
              "refs/heads/main": "thunderbird_daily",
              "refs/heads/beta": "thunderbird_beta",
              "refs/heads/release": "thunderbird_release",
            };

            if (context.ref in RELEASE_ENVS) {
              return RELEASE_ENVS[context.ref];
            } else {
              core.setFailed(`Unknown branch ${context.ref} for shippable builds!`)
              return "";
            }

  dump_config:
    runs-on: ubuntu-latest
    needs: get_environment
    environment: ${{ needs.get_environment.outputs.releaseEnv }}
    outputs:
      matrixInclude: ${{ vars.MATRIX_INCLUDE }}
      matrixIncludeApk: ${{ steps.dump.outputs.matrixIncludeApk }}
      releaseType: ${{ vars.RELEASE_TYPE }}
    steps:
      - name: Dump environment
        uses: actions/github-script@v7
        id: dump
        env:
          vars: ${{ toJSON(vars) }}
          matrixInclude: ${{ vars.MATRIX_INCLUDE }}
        with:
          script: |
            console.log(process.env.vars);
            const matrix = JSON.parse(process.env.matrixInclude);
            const matrixApk = matrix.filter(item => item.packageFormat == "apk");
            core.setOutput("matrixIncludeApk", matrixApk);

  build_unsigned:
    runs-on: ubuntu-latest
    steps:
      - run: |
          wget -O k9mail-default-beta-signed.apk https://github.com/thunderbird/thunderbird-android/releases/download/K9MAIL_8_0b1/k9-8.0b1.apk
          wget -O thunderbird-foss-beta-signed.apk https://github.com/thunderbird/thunderbird-android/releases/download/THUNDERBIRD_8_0b2/thunderbird-8.0b2.apk
          wget -O thunderbird-full-beta-signed.aab https://mozilla.kewis.ch/thunderbird-full-beta.aab
        
      - name: Upload unsigned
        uses: actions/upload-artifact@v4
        with:
          name: signed-thunderbird-apk-foss
          path: thunderbird-foss-beta-signed.apk
          if-no-files-found: error

      - name: Upload unsigned
        uses: actions/upload-artifact@v4
        with:
          name: signed-thunderbird-bundle-full
          path: thunderbird-full-beta-signed.aab
          if-no-files-found: error

      - name: Upload unsigned
        uses: actions/upload-artifact@v4
        with:
          name: signed-k9mail-apk-default
          path: k9mail-default-beta-signed.apk
          if-no-files-found: error
      
  sign_mobile:
    needs: [build_unsigned]
    runs-on: ubuntu-latest
    steps:
      - name: Temp
        shell: bash
        run: |
          true


  #build_unsigned:
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 90
  #  needs: [dump_config, get_environment]
  #  strategy:
  #    matrix:
  #      include: "${{ fromJSON(needs.dump_config.outputs.matrixInclude) }}"
  #  environment: ${{ needs.get_environment.outputs.releaseEnv }}
  #  steps:
  #    - uses: actions/checkout@v4

  #    - name: Copy CI gradle.properties
  #      shell: bash
  #      run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

  #    - uses: actions/setup-java@v4
  #      with:
  #        distribution: temurin
  #        java-version: 17

  #    - name: Setup Gradle
  #      uses: gradle/actions/setup-gradle@v4

  #    - name: Build It
  #      shell: bash
  #      env:
  #        PACKAGE_FORMAT: ${{ matrix.packageFormat }}
  #        PACKAGE_FLAVOR: ${{ matrix.packageFlavor }}
  #        APP_NAME: ${{ matrix.appName }}
  #        RELEASE_TYPE: ${{ vars.RELEASE_TYPE }}
  #      run: |
  #        if [[ "$APP_NAME" = "thunderbird" && "$PACKAGE_FORMAT" = "apk" ]]; then
  #          BUILD_COMMAND="assemble${PACKAGE_FLAVOR^}${RELEASE_TYPE^}"
  #        elif [[ "$APP_NAME" = "thunderbird" && "${PACKAGE_FORMAT}" = "bundle" ]]; then
  #          BUILD_COMMAND="bundle${PACKAGE_FLAVOR^}${RELEASE_TYPE^}"
  #        elif [[ "$APP_NAME" = "k9mail" ]]; then
  #          BUILD_COMMAND="assembleRelease"
  #        fi

  #        echo "BUILDING: :app-${APP_NAME}:${BUILD_COMMAND}"
  #        ./gradlew clean :app-${APP_NAME}:${BUILD_COMMAND} --no-build-cache --no-configuration-cache
  #        echo "Status: $?"

  #    - name: Move apps to upload directory
  #      shell: bash
  #      env:
  #        PACKAGE_FORMAT: ${{ matrix.packageFormat }}
  #        PACKAGE_FLAVOR: ${{ matrix.packageFlavor }}
  #        APP_NAME: ${{ matrix.appName }}
  #        RELEASE_TYPE: ${{ vars.RELEASE_TYPE }}
  #        UPLOAD_PATH: "uploads"
  #      run: |
  #        OUT_BASE=app-${APP_NAME}/build/outputs/${PACKAGE_FORMAT}

  #        if [[ "$APP_NAME" = "thunderbird" && "$PACKAGE_FORMAT" = "apk" ]]; then
  #          OUT_PATH="${OUT_BASE}/${PACKAGE_FLAVOR}/${RELEASE_TYPE}"
  #          OUT_FILE="app-${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-unsigned.apk"
  #          UPLOAD_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.apk"
  #        elif [[ "$APP_NAME" = "thunderbird" && "${PACKAGE_FORMAT}" = "bundle" ]]; then
  #          OUT_PATH="${OUT_BASE}/${PACKAGE_FLAVOR}${RELEASE_TYPE^}"
  #          OUT_FILE="app-${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.aab"
  #          UPLOAD_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.aab"
  #        elif [[ "$APP_NAME" = "k9mail" ]]; then
  #          OUT_PATH="${OUT_BASE}/release"
  #          OUT_FILE="app-${APP_NAME}-release-unsigned.apk"
  #          UPLOAD_FILE="${APP_NAME}-${RELEASE_TYPE}.apk"
  #        else
  #          echo "PACKAGE_FORMAT $PACKAGE_FORMAT is unknown. Exiting."
  #          exit 23
  #        fi

  #        mkdir -p "${UPLOAD_PATH}"

  #        if [[ -f "${OUT_PATH}/${OUT_FILE}" ]]; then
  #          mv -f "${OUT_PATH}/${OUT_FILE}" "${UPLOAD_PATH}/${UPLOAD_FILE}"
  #        else
  #          echo "Build file ${OUT_PATH}/${OUT_FILE} not found. Exiting."
  #          ls -l ${OUT_PATH}
  #          exit 24
  #        fi
  #        echo "Upload contents:"
  #        ls -l ${UPLOAD_PATH}/

  #    - name: Upload unsigned
  #      uses: actions/upload-artifact@v4
  #      env:
  #        UPLOAD_PATH: "uploads"
  #      with:
  #        name: unsigned-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
  #        path: ${{ env.UPLOAD_PATH }}/
  #        if-no-files-found: error

  #sign_mobile:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      include: "${{ fromJSON(needs.dump_config.outputs.matrixInclude) }}"
  #  environment: ${{ matrix.appName }}_${{ needs.dump_config.outputs.releaseType }}_${{ matrix.packageFlavor || 'default' }}
  #  needs: [build_unsigned, dump_config]
  #  env:
  #    RELEASE_TYPE: ${{ needs.dump_config.outputs.releaseType }}
  #  steps:
  #    - uses: actions/download-artifact@v4
  #      with:
  #        name: unsigned-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
  #        path: uploads/

  #    - uses: noriban/sign-android-release@5f144321d3c7c2233266e78b42360345d8bbe403   # v5.1
  #      name: Sign package
  #      with:
  #        releaseDirectory: uploads/
  #        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
  #        alias: ${{ secrets.KEY_ALIAS }}
  #        keyPassword: ${{ secrets.KEY_PASSWORD }}
  #        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}

  #    - name: Remove JKS file
  #      shell: bash
  #      run: |
  #        rm -f uploads/*.jks

  #    - name: Upload signed
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: signed-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
  #        if-no-files-found: error
  #        path: |
  #          uploads/*-signed.apk
  #          uploads/*.aab

  pre_publish:
    # This is a holding job meant to require approval before proceeding with the publishing jobs below
    # The environment has a deployment protection rule requiring approval from a set of named reviewers
    # before proceeding.
    environment: publish_hold
    needs: [sign_mobile]
    runs-on: ubuntu-latest
    steps:
      - name: Approval
        shell: bash
        run: |
          true

  github_release:
    runs-on: ubuntu-latest
    needs: [ pre_publish, dump_config ]
    strategy:
      matrix:
        include: "${{ fromJSON(needs.dump_config.outputs.matrixIncludeApk) }}"
    environment: gh-releases
    env:
      RELEASE_TYPE: ${{ needs.dump_config.outputs.releaseType }}
      APP_NAME: ${{ matrix.appName }}
      PACKAGE_FORMAT: ${{ matrix.packageFormat }}
      PACKAGE_FLAVOR: ${{ matrix.packageFlavor || 'default' }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: signed-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
          path: "uploads/"

      - name: Get APK Info
        id: apkinfo
        shell: bash
        run: |
          APK_FILE="uploads/${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-signed.apk"
          LATEST_BUILD_TOOLS=$(ls -d ${ANDROID_SDK_ROOT}/build-tools/* | sort -V | tail -n1)
          AAPT=${LATEST_BUILD_TOOLS}/aapt

          NAME=$(${AAPT} dump badging $APK_FILE | sed -n "s/.*application-label:'\([^']*\)'.*/\1/p")
          VERSION=$(${AAPT} dump badging $APK_FILE | sed -n "s/.*versionName='\([^']*\)'.*/\1/p")

          echo "TAG_NAME=${APP_NAME^^}_${VERSION//./_}" >> $GITHUB_OUTPUT
          echo "FULL_VERSION_NAME=${NAME} ${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=${VERSION}" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

      - name: Rename release assets
        id: rename
        shell: bash
        env:
          VERSION_NAME=${{ steps.apkinfo.outputs.VERSION_NAME }}
        run: |
          APK_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-signed.apk"
          APK_FILE_PRETTY="${APP_NAME}-${VERSION_NAME}.apk"
          mv uploads/${APK_FILE} ${UPLOADS}/${APK_FILE_PRETTY}

          echo "APK_FILE=${APK_FILE_PRETTY}" >> $GITHUB_OUTPUT
          ls -l uploads/${APK_FILE_PRETTY}

  #    - name: App Token Generate
  #      uses: actions/create-github-app-token@v1
  #      id: app-token
  #      with:
  #        app-id: ${{ vars.RELEASER_APP_CLIENT_ID }}
  #        private-key: ${{ secrets.RELEASER_APP_PRIVATE_KEY }}

      - name: Publish
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          #token: ${{ steps.app-token.outputs.token }}
          target_commitish: ${{ github.sha }}
          tag_name: ${{ steps.apkinfo.outputs.TAG_NAME }}
          name: ${{ steps.apkinfo.outputs.FULL_VERSION_NAME }}
          prelease: ${{ env.RELEASE_TYPE != "release" }}
          fail_on_unmatched_files: true
          files: |
            uploads/${{ steps.rename.outputs.APK_FILE }}
